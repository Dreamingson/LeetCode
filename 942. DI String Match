/*** Version 1 ***/
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */

void swap(int *a, int *b){
    int temp;
    temp=*a;
    *a=*b;
    *b=temp;
}

void sort(int* arr, int start, int size, int flag){
    int i,j,temp;
    for(i=start;i<size;i++)
        for(j=start;j<size-i+start-1;j++){
            if(flag==0)
                if(arr[j]>arr[j+1]) swap(&arr[j],&arr[j+1]);
            if(flag==1)
                if(arr[j]<arr[j+1]) swap(&arr[j],&arr[j+1]);
        }
}


int* diStringMatch(char * S, int* returnSize){
    
    int i,j,len;
    len=strlen(S)+1;
    
    *returnSize=len;
    
    int* result=malloc(len*sizeof(int));
    
    for(i=0;i<len;i++) result[i]=i;
 
    i=0;
    while(S[i]!='\0'){
        if(i==0){
            if(S[i]=='D') sort(result,0,len,1);
        }
        else if(i>0){
            if(S[i]!=S[i-1]&&S[i]=='D') sort(result,i,len,1);     
            else if(S[i]!=S[i-1]&&S[i]=='I') sort(result,i,len,0);
            }
         i++;                  
    }
        
    return result;
}


/*** Version 2 ***/

int* diStringMatch(char * S, int* returnSize){
    
    int i,j,k,start,end,len;
    len=strlen(S)+1;
    
    *returnSize=len;
    
    int* result=malloc(len*sizeof(int));
    
    start=0;
    end=len-1;
   
    for(i=0;i<len-1;i++){
        if(S[i]=='I') result[i]=start++;
        else result[i]=end--;    
    }
    
    result[i]=start;
        
    return result;
}
